CREATE OR REPLACE FUNCTION RawToHex (RW VarChar(2000) FOR BIT DATA)
RETURNS VarChar(2000)
BEGIN
	DECLARE HX VarChar(200) ;

	SET HX = hex(RW) ;

	RETURN HX ;	
END ;
/

CREATE OR REPLACE FUNCTION HexToRaw (HX VarChar(4000))
	RETURNS VarChar(2000) FOR BIT DATA
	SPECIFIC HexToBitChar
	LANGUAGE SQL
	CONTAINS SQL
	NO EXTERNAL ACTION
	DETERMINISTIC
BEGIN ATOMIC
	DECLARE HXU VarChar(4000);
	DECLARE HXLen Integer;
	DECLARE XDigits CHAR(16) DEFAULT '123456789ABCDEF';
	DECLARE RetVal VarChar(2000) FOR BIT DATA;
	DECLARE Pos Integer;
	DECLARE DiagText VARCHAR(70);

	SET (HXU, HXLen) = (SUBSTR('0', 1, MOD(LENGTH(LTRIM(RTRIM(HX))),2))||UCASE(LTRIM(RTRIM(HX))), LENGTH(LTRIM(RTRIM(HX)))+MOD(LENGTH(LTRIM(RTRIM(HX))), 2));
	
	IF TRANSLATE(HXU, '*', ' 0'||XDigits) <> '' THEN
		SET DiagText = 'Input data contains invalid character. Position = ' || RTRIM(CHAR(HXLen - LENGTH(LTRIM(TRANSLATE(HXU, '*', ' 0'||XDigits))) + 1));
		SIGNAL SQLSTATE VALUE 'UX002' SET MESSAGE_TEXT = DiagText;
	END IF;
	
	SET (Pos, RetVal) = (1, '');
	
	WHILE Pos < HXLen DO
		SET RetVal = RetVal || COALESCE(CHR(NULLIF( LOCATE(SUBSTR(HXU,Pos, 1),XDigits)*16 +LOCATE(SUBSTR(HXU,Pos+1,1),XDigits), 0 )),x'00');
		SET Pos = Pos + 2;
	END WHILE;
	
	return RetVal ;
END ;
/

commit ;
