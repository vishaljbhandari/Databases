SET SERVEROUTPUT ON;
SET LINES 2000 ;
SET AUTOCOMMIT OFF ;

-- Active Account : Start --
DECLARE
	MAX_ID NUMBER ;
	START_ID NUMBER := 1024 ;
	CURR_ID NUMBER := 2024 ;
BEGIN
	SELECT MAX(ID) INTO MAX_ID FROM ACCOUNT@DU_NIKIRA ;
	DBMS_OUTPUT.PUT_LINE('--------------> Migrating Active Accounts <--------------') ;
	LOOP

		INSERT INTO ACCOUNT
		(
			ID, HIERARCHY_ID, PARENT_ID, ACCOUNT_TYPE, ACCOUNT_NAME, ACCOUNT_DOA, NETWORK_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS_LINE_1,
			ADDRESS_LINE_2, ADDRESS_LINE_3, CITY, POST_CODE, CREDIT_LIMIT, RATE_PLAN, BILL_CYCLE, FRD_INDICATOR, COMMENTS, GROUPS, MODIFIED_DATE
		)
		SELECT
			A.ID, null, null, 0, A.ACCOUNT_NAME, A.ACCOUNT_DOA, A.NETWORK_ID, A.FIRST_NAME, A.MIDDLE_NAME,
			A.LAST_NAME, A.ADDRESS_LINE_1, A.ADDRESS_LINE_2, A.ADDRESS_LINE_3, A.CITY, A.POST_CODE, A.CREDIT_LIMIT,
			A.RATE_PLAN, A.BILL_CYCLE, 0, '', 'Default', sysdate 
		FROM ACCOUNT@DU_NIKIRA A, BLACKLIST_ACCOUNT@DU_NIKIRA B
		WHERE A.ID BETWEEN START_ID AND CURR_ID AND A.ID = B.ID(+) AND B.ID IS NULL ;

		COMMIT ;
		DBMS_OUTPUT.PUT_LINE('Active Accounts Inserted for Account IDs Between ' || START_ID || ' and ' || CURR_ID) ;

		EXIT WHEN CURR_ID >= MAX_ID ;

		START_ID := CURR_ID + 1 ;
		CURR_ID := CURR_ID + 1000 ;

	END LOOP ;
	DBMS_OUTPUT.PUT_LINE('xxxxxxxxxxxxxx> Active Accounts Migration Completed <xxxxxxxxxxxxxx') ;
	DBMS_OUTPUT.PUT_LINE('-');
	DBMS_OUTPUT.PUT_LINE('--------------> Migrating Blacklist and Precheck Accounts <--------------') ;
END ;
/
-- Active Account : End --

-- Blacklist and Precheck Account : Start --
INSERT INTO ACCOUNT
(
	ID, HIERARCHY_ID, PARENT_ID, ACCOUNT_TYPE, ACCOUNT_NAME, ACCOUNT_DOA, NETWORK_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS_LINE_1,
	ADDRESS_LINE_2, ADDRESS_LINE_3, CITY, POST_CODE, CREDIT_LIMIT, RATE_PLAN, BILL_CYCLE, FRD_INDICATOR, COMMENTS, GROUPS, MODIFIED_DATE
)
SELECT
	ID, null, null, 1, ACCOUNT_NAME, ACCOUNT_DOA, NETWORK_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS_LINE_1, ADDRESS_LINE_2, 
	ADDRESS_LINE_3, CITY, POST_CODE, CREDIT_LIMIT, RATE_PLAN, BILL_CYCLE, FRD_INDICATOR, '', 'Default', sysdate 
FROM BLACKLIST_ACCOUNT@DU_NIKIRA WHERE ID > 1024 ;

COMMIT ;

INSERT INTO ACCOUNT
(
	ID, HIERARCHY_ID, PARENT_ID, ACCOUNT_TYPE, ACCOUNT_NAME, ACCOUNT_DOA, NETWORK_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS_LINE_1,
	ADDRESS_LINE_2, ADDRESS_LINE_3, CITY, POST_CODE, CREDIT_LIMIT, RATE_PLAN, BILL_CYCLE, FRD_INDICATOR, COMMENTS, GROUPS, MODIFIED_DATE
)
SELECT
	ID, null, null, 2, ACCOUNT_NAME, ACCOUNT_DOA, NETWORK_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, ADDRESS_LINE_1, ADDRESS_LINE_2, 
	ADDRESS_LINE_3, CITY, POST_CODE, CREDIT_LIMIT, RATE_PLAN, BILL_CYCLE, FRD_INDICATOR, '', 'Default', sysdate
FROM BLACKLIST_ACCOUNT@DU_NIKIRA WHERE ID > 1024 ;

COMMIT ;
-- Blacklist and Precheck Account : End --

-- Active Account Credit Detail : Start --
DECLARE
	MAX_ID NUMBER ;
	START_ID NUMBER := 1024 ;
	CURR_ID NUMBER := 2024 ;
BEGIN
	SELECT MAX(ACCOUNT_ID) INTO MAX_ID FROM ACCOUNT_CREDIT_DETAIL@DU_NIKIRA ;
	DBMS_OUTPUT.PUT_LINE('xxxxxxxxxxxxxx> Blacklist and Precheck Accounts Migration Completed <xxxxxxxxxxxxxx') ;
	DBMS_OUTPUT.PUT_LINE('-');
	DBMS_OUTPUT.PUT_LINE('--------------> Migrating Active Account Credit Detail <--------------') ;
	LOOP

		INSERT INTO ACCOUNT_CREDIT_DETAIL
		(
			ACCOUNT_ID, ACCOUNT_NAME, STATIC_CREDIT_LIMIT, DYNAMIC_CREDIT_LIMIT, PREVIOUS_DYNAMIC_CREDIT_LIMIT, TOTAL_SLIPPAGE,
			PREVIOUS_TOTAL_SLIPPAGE, OUTSTANDING_AMOUNT, PREVIOUS_OUTSTANDING_AMOUNT, TOTAL_PAYMENT, PREVIOUS_TOTAL_PAYMENT,
			UNBILLED_AMOUNT, LAST_DUE_DATE, PREVIOUS_LAST_DUE_DATE, LAST_PAY_DATE, PREVIOUS_LAST_PAY_DATE, LAST_PAID_AMOUNT,
			PREVIOUS_LAST_PAID_AMOUNT, NO_OF_SUSPENSIONS, PREVIOUS_NO_OF_SUSPENSIONS, NO_OF_FULL_PAYMENTS, PREVIOUS_NO_OF_FULL_PAYMENTS,
			NO_OF_PART_PAYMENTS, PREVIOUS_NO_OF_PART_PAYMENTS, NO_OF_SLIPPAGES, PREVIOUS_NO_OF_SLIPPAGES, BILL_CYCLE, EXPOSURE,
			PERCENTAGE_EXPOSURE, CREDIT_EXPIRY_DATE, ACTUAL_INVOICE_AMOUNT, PREVIOUS_ACTUAL_INVOICE_AMT, INTERIM_TOTAL_SLIPPAGE, 
			PREV_INTERIM_TOTAL_SLIPPAGE, INTERIM_OUTSTANDING_AMOUNT, PREV_INTERIM_OUTSTANDING_AMT, INTERIM_TOTAL_PAYMENT,
			PREV_INTERIM_TOTAL_PAYMENT, INTERIM_LAST_DUE_DATE, PREV_INTERIM_LAST_DUE_DATE, INTERIM_LAST_PAY_DATE,
			PREV_INTERIM_LAST_PAY_DATE, INTERIM_LAST_PAID_AMOUNT, PREV_INTERIM_LAST_PAID_AMOUNT, INTERIM_NO_OF_SLIPPAGES,
			PREV_INTERIM_NO_OF_SLIPPAGES, INTERIM_NO_OF_PAYMENTS, PREV_INTERIM_NO_OF_PAYMENTS
		)
		SELECT
			AC.ACCOUNT_ID, A.ACCOUNT_NAME, AC.STATIC_CREDIT_LIMIT, AC.DYNAMIC_CREDIT_LIMIT, AC.PREVIOUS_DYNAMIC_CREDIT_LIMIT, AC.TOTAL_SLIPPAGE,
			AC.PREVIOUS_TOTAL_SLIPPAGE, AC.OUTSTANDING_AMOUNT, AC.PREVIOUS_OUTSTANDING_AMOUNT, AC.TOTAL_PAYMENT, AC.PREVIOUS_TOTAL_PAYMENT,
			AC.UNBILLED_AMOUNT, AC.LAST_DUE_DATE, AC.PREVIOUS_LAST_DUE_DATE, AC.LAST_PAY_DATE, AC.PREVIOUS_LAST_PAY_DATE, AC.LAST_PAID_AMOUNT,
			AC.PREVIOUS_LAST_PAID_AMOUNT, AC.NO_OF_SUSPENSIONS, AC.PREVIOUS_NO_OF_SUSPENSIONS, AC.NO_OF_FULL_PAYMENTS, AC.PREVIOUS_NO_OF_FULL_PAYMENTS,
			AC.NO_OF_PART_PAYMENTS, AC.PREVIOUS_NO_OF_PART_PAYMENTS, AC.NO_OF_SLIPPAGES, AC.PREVIOUS_NO_OF_SLIPPAGES, A.BILL_CYCLE, AC.EXPOSURE,
			AC.PERCENTAGE_EXPOSURE, AC.CREDIT_EXPIRY_DATE, AC.ACTUAL_INVOICE_AMOUNT, AC.PREVIOUS_ACTUAL_INVOICE_AMT, AC.INTERIM_TOTAL_SLIPPAGE,
			AC.PREV_INTERIM_TOTAL_SLIPPAGE, AC.INTERIM_OUTSTANDING_AMOUNT, AC.PREV_INTERIM_OUTSTANDING_AMT, AC.INTERIM_TOTAL_PAYMENT,
			AC.PREV_INTERIM_TOTAL_PAYMENT, AC.INTERIM_LAST_DUE_DATE, AC.PREV_INTERIM_LAST_DUE_DATE, AC.INTERIM_LAST_PAY_DATE,
			AC.PREV_INTERIM_LAST_PAY_DATE, AC.INTERIM_LAST_PAID_AMOUNT, AC.PREV_INTERIM_LAST_PAID_AMOUNT, AC.INTERIM_NO_OF_SLIPPAGES,
			AC.PREV_INTERIM_NO_OF_SLIPPAGES, AC.INTERIM_NO_OF_PAYMENTS, AC.PREV_INTERIM_NO_OF_PAYMENTS
		FROM ACCOUNT_CREDIT_DETAIL@DU_NIKIRA AC, ACCOUNT A, BL_ACCOUNT_CREDIT_DETAIL@DU_NIKIRA B
		WHERE AC.ACCOUNT_ID = A.ID AND AC.ACCOUNT_ID BETWEEN START_ID AND CURR_ID AND AC.ACCOUNT_ID = B.ACCOUNT_ID(+) AND B.ACCOUNT_ID IS NULL ;

		COMMIT ;
		DBMS_OUTPUT.PUT_LINE('Account Credit Detail Inserted for Account IDs Between ' || START_ID || ' and ' || CURR_ID) ;

		EXIT WHEN CURR_ID >= MAX_ID ;

		START_ID := CURR_ID + 1 ;
		CURR_ID := CURR_ID + 1000 ;

	END LOOP ;
	DBMS_OUTPUT.PUT_LINE('xxxxxxxxxxxxxx> Active Account Credit Detail Migration Completed <xxxxxxxxxxxxxx') ;
	DBMS_OUTPUT.PUT_LINE('-');
	DBMS_OUTPUT.PUT_LINE('--------------> Migrating Blacklist and Precheck Account Credit Detail <--------------') ;
END ;
/
-- Active Account Credit Detail : End --

-- Blacklist Account Credit Detail : Start --
INSERT INTO ACCOUNT_CREDIT_DETAIL
(
	ACCOUNT_ID, ACCOUNT_NAME, STATIC_CREDIT_LIMIT, DYNAMIC_CREDIT_LIMIT, PREVIOUS_DYNAMIC_CREDIT_LIMIT, TOTAL_SLIPPAGE, PREVIOUS_TOTAL_SLIPPAGE, 
	OUTSTANDING_AMOUNT, PREVIOUS_OUTSTANDING_AMOUNT, TOTAL_PAYMENT, PREVIOUS_TOTAL_PAYMENT, UNBILLED_AMOUNT, LAST_DUE_DATE, PREVIOUS_LAST_DUE_DATE, 
	LAST_PAY_DATE, PREVIOUS_LAST_PAY_DATE, LAST_PAID_AMOUNT, PREVIOUS_LAST_PAID_AMOUNT, NO_OF_SUSPENSIONS, PREVIOUS_NO_OF_SUSPENSIONS, 
	NO_OF_FULL_PAYMENTS, PREVIOUS_NO_OF_FULL_PAYMENTS, NO_OF_PART_PAYMENTS, PREVIOUS_NO_OF_PART_PAYMENTS, NO_OF_SLIPPAGES, PREVIOUS_NO_OF_SLIPPAGES, 
	BILL_CYCLE, EXPOSURE, PERCENTAGE_EXPOSURE, CREDIT_EXPIRY_DATE, ACTUAL_INVOICE_AMOUNT, PREVIOUS_ACTUAL_INVOICE_AMT, INTERIM_TOTAL_SLIPPAGE, 
	PREV_INTERIM_TOTAL_SLIPPAGE, INTERIM_OUTSTANDING_AMOUNT, PREV_INTERIM_OUTSTANDING_AMT, INTERIM_TOTAL_PAYMENT, PREV_INTERIM_TOTAL_PAYMENT, 
	INTERIM_LAST_DUE_DATE, PREV_INTERIM_LAST_DUE_DATE, INTERIM_LAST_PAY_DATE, PREV_INTERIM_LAST_PAY_DATE, INTERIM_LAST_PAID_AMOUNT, 
	PREV_INTERIM_LAST_PAID_AMOUNT, INTERIM_NO_OF_SLIPPAGES, PREV_INTERIM_NO_OF_SLIPPAGES, INTERIM_NO_OF_PAYMENTS, PREV_INTERIM_NO_OF_PAYMENTS
)
SELECT
	AC.ACCOUNT_ID, A.ACCOUNT_NAME, AC.STATIC_CREDIT_LIMIT, AC.DYNAMIC_CREDIT_LIMIT, AC.PREVIOUS_DYNAMIC_CREDIT_LIMIT, AC.TOTAL_SLIPPAGE,
	AC.PREVIOUS_TOTAL_SLIPPAGE, AC.OUTSTANDING_AMOUNT, AC.PREVIOUS_OUTSTANDING_AMOUNT, AC.TOTAL_PAYMENT, AC.PREVIOUS_TOTAL_PAYMENT,
	AC.UNBILLED_AMOUNT, AC.LAST_DUE_DATE, AC.PREVIOUS_LAST_DUE_DATE, AC.LAST_PAY_DATE, AC.PREVIOUS_LAST_PAY_DATE, AC.LAST_PAID_AMOUNT,
	AC.PREVIOUS_LAST_PAID_AMOUNT, AC.NO_OF_SUSPENSIONS, AC.PREVIOUS_NO_OF_SUSPENSIONS, AC.NO_OF_FULL_PAYMENTS, AC.PREVIOUS_NO_OF_FULL_PAYMENTS,
	AC.NO_OF_PART_PAYMENTS, AC.PREVIOUS_NO_OF_PART_PAYMENTS, AC.NO_OF_SLIPPAGES, AC.PREVIOUS_NO_OF_SLIPPAGES, A.BILL_CYCLE, AC.EXPOSURE,
	AC.PERCENTAGE_EXPOSURE, AC.CREDIT_EXPIRY_DATE, AC.ACTUAL_INVOICE_AMOUNT, AC.PREVIOUS_ACTUAL_INVOICE_AMT, AC.INTERIM_TOTAL_SLIPPAGE,
	AC.PREV_INTERIM_TOTAL_SLIPPAGE, AC.INTERIM_OUTSTANDING_AMOUNT, AC.PREV_INTERIM_OUTSTANDING_AMT, AC.INTERIM_TOTAL_PAYMENT,
	AC.PREV_INTERIM_TOTAL_PAYMENT, AC.INTERIM_LAST_DUE_DATE, AC.PREV_INTERIM_LAST_DUE_DATE, AC.INTERIM_LAST_PAY_DATE,
	AC.PREV_INTERIM_LAST_PAY_DATE, AC.INTERIM_LAST_PAID_AMOUNT, AC.PREV_INTERIM_LAST_PAID_AMOUNT, AC.INTERIM_NO_OF_SLIPPAGES,
	AC.PREV_INTERIM_NO_OF_SLIPPAGES, AC.INTERIM_NO_OF_PAYMENTS, AC.PREV_INTERIM_NO_OF_PAYMENTS
FROM BL_ACCOUNT_CREDIT_DETAIL@DU_NIKIRA AC, ACCOUNT A
WHERE AC.ACCOUNT_ID = A.ID AND A.ACCOUNT_TYPE = 1 ;

COMMIT ;
-- Blacklist Account Credit Detail : End --

-- Active Account Recharge Detail : Start --
DECLARE
	MAX_ID NUMBER ;
	START_ID NUMBER := 1024 ;
	CURR_ID NUMBER := 2024 ;
BEGIN
	SELECT MAX(ACCOUNT_ID) INTO MAX_ID FROM ACCOUNT_RECHARGE_DETAIL@DU_NIKIRA ;
	DBMS_OUTPUT.PUT_LINE('xxxxxxxxxxxxxx> Blacklist and Precheck Account Credit Detail Migration Completed <xxxxxxxxxxxxxx') ;
	DBMS_OUTPUT.PUT_LINE('-');
	DBMS_OUTPUT.PUT_LINE('--------------> Migrating Active Account Recgarge Detail <--------------') ;
	LOOP

		INSERT INTO ACCOUNT_RECHARGE_DETAIL
		(
			ACCOUNT_ID, ACCOUNT_NAME, VOUCHER_EXPIRY_DATE, PREV_VOUCHER_EXPIRY_DATE,
			GRACE_PERIOD_EXPIRY_DATE, PREV_GRACE_PERIOD_EXPIRY_DATE, CURRENT_BALANCE,
			PREVIOUS_BALANCE, LAST_RECHARGE_DATE, LAST_CDR_TIME, DIFF_BALANCE_PERCENTAGE
		)
		SELECT
			AR.ACCOUNT_ID, A.ACCOUNT_NAME, AR.VOUCHER_EXPIRY_DATE, AR.PREV_VOUCHER_EXPIRY_DATE,
			AR.GRACE_PERIOD_EXPIRY_DATE, AR.PREV_GRACE_PERIOD_EXPIRY_DATE, AR.CURRENT_BALANCE,
			AR.PREVIOUS_BALANCE, AR.LAST_RECHARGE_DATE, AR.LAST_CDR_TIME, AR.DIFF_BALANCE_PERCENTAGE
		FROM ACCOUNT_RECHARGE_DETAIL@DU_NIKIRA AR, ACCOUNT A, BL_ACCOUNT_RECHARGE_DETAIL@DU_NIKIRA B
		WHERE AR.ACCOUNT_ID = A.ID AND AR.ACCOUNT_ID BETWEEN START_ID AND CURR_ID AND AR.ACCOUNT_ID = B.ACCOUNT_ID(+) AND B.ACCOUNT_ID IS NULL ;

		COMMIT ;
		DBMS_OUTPUT.PUT_LINE('Account Recharge Detail Inserted for Account IDs Between ' || START_ID || ' and ' || CURR_ID) ;

		EXIT WHEN CURR_ID >= MAX_ID ;

		START_ID := CURR_ID + 1 ;
		CURR_ID := CURR_ID + 1000 ;

	END LOOP ;
	DBMS_OUTPUT.PUT_LINE('xxxxxxxxxxxxxx> Active Account Recharge Detail Migration Completed <xxxxxxxxxxxxxx') ;
	DBMS_OUTPUT.PUT_LINE('-');
	DBMS_OUTPUT.PUT_LINE('--------------> Migrating Blacklist and Precheck Account Recharge Detail <--------------') ;
END ;
/
-- Active Account Recharge Detail : End --

-- Blacklist Account Recharge Detail : Start --
INSERT INTO ACCOUNT_RECHARGE_DETAIL
(
	ACCOUNT_ID, ACCOUNT_NAME, VOUCHER_EXPIRY_DATE, PREV_VOUCHER_EXPIRY_DATE,
	GRACE_PERIOD_EXPIRY_DATE, PREV_GRACE_PERIOD_EXPIRY_DATE, CURRENT_BALANCE,
	PREVIOUS_BALANCE, LAST_RECHARGE_DATE, LAST_CDR_TIME, DIFF_BALANCE_PERCENTAGE
)
SELECT
	AR.ACCOUNT_ID, A.ACCOUNT_NAME, AR.VOUCHER_EXPIRY_DATE, AR.PREV_VOUCHER_EXPIRY_DATE,
	AR.GRACE_PERIOD_EXPIRY_DATE, AR.PREV_GRACE_PERIOD_EXPIRY_DATE, AR.CURRENT_BALANCE,
	AR.PREVIOUS_BALANCE, AR.LAST_RECHARGE_DATE, AR.LAST_CDR_TIME, AR.DIFF_BALANCE_PERCENTAGE
FROM BL_ACCOUNT_RECHARGE_DETAIL@DU_NIKIRA AR, ACCOUNT A
WHERE AR.ACCOUNT_ID = A.ID AND A.ACCOUNT_TYPE = 1 ;

COMMIT ;
-- Blacklist Account Recharge Detail : End --

-- Active Subscribers : Start --
DECLARE
	MAX_ID NUMBER ;
	START_ID NUMBER := 1024 ;
	CURR_ID NUMBER := 2024 ;
BEGIN
	SELECT MAX(ID) INTO MAX_ID FROM SUBSCRIBER@DU_NIKIRA ;
	DBMS_OUTPUT.PUT_LINE('xxxxxxxxxxxxxx> Blacklist and Precheck Account Recharge Detail Migration Completed <xxxxxxxxxxxxxx') ;
	DBMS_OUTPUT.PUT_LINE('-');
	DBMS_OUTPUT.PUT_LINE('--------------> Migrating Active Subscribers <--------------') ;
	LOOP

		INSERT INTO SUBSCRIBER
		(
			ID, ACCOUNT_ID, PHONE_NUMBER, SUBSCRIBER_DOA, HOME_PHONE_NUMBER, OFFICE_PHONE_NUMBER, CONTACT_PHONE_NUMBER, MCN1, MCN2, IMSI, IMEI,
			CONNECTION_TYPE, GROUPS, SERVICES, STATUS, QOS, PRODUCT_TYPE, MODIFIED_DATE, NETWORK_ID, RATEPLAN, RATEPLAN_ID, DATE_OF_BIRTH, BILLCYCLE,
			SUBSCRIPTION_TYPE, CREDIT_CLASS, END_SERVICE_DATE, NATIONALITY, PASSPORT_NUMBER, COMPANY_REGISTRATION_NUMBER, GROUP_DESCRIPTION,
			OPTIONAL_FIELD1, OPTIONAL_FIELD2, OPTIONAL_FIELD3, OPTIONAL_FIELD4, OPTIONAL_FIELD5, OPTIONAL_FIELD6, OPTIONAL_FIELD7, OPTIONAL_FIELD8,
			OPTIONAL_FIELD9, OPTIONAL_FIELD10, MAIN_DIR_NO_FLAG, SUBSCRIBER_TYPE, ACCOUNT_NAME
		)
		SELECT
			S.ID, S.ACCOUNT_ID, S.PHONE_NUMBER, S.SUBSCRIBER_DOA, S.HOME_PHONE_NUMBER, S.OFFICE_PHONE_NUMBER, S.CONTACT_PHONE_NUMBER,
			S.MCN1, S.MCN2, S.IMSI, S.IMEI, S.CONNECTION_TYPE, S.GROUPS, S.SERVICES, S.STATUS, S.QOS, S.PRODUCT_TYPE, S.MODIFIED_DATE,
			S.NETWORK_ID, S.RATEPLAN, S.RATEPLAN_ID, S.DATE_OF_BIRTH, S.BILLCYCLE, S.SUBSCRIPTION_TYPE, S.CREDIT_CLASS, S.END_SERVICE_DATE,
			S.NATIONALITY, S.PASSPORT_NUMBER, S.COMPANY_REGISTRATION_NUMBER, S.GROUP_DESCRIPTION, S.OPTIONAL_FIELD1, S.OPTIONAL_FIELD2,
			S.OPTIONAL_FIELD3, S.OPTIONAL_FIELD4, S.OPTIONAL_FIELD5, S.OPTIONAL_FIELD6, S.OPTIONAL_FIELD7, S.OPTIONAL_FIELD8,
			S.OPTIONAL_FIELD9, S.OPTIONAL_FIELD10, S.MAIN_DIR_NO_FLAG, 0, A.ACCOUNT_NAME
		FROM SUBSCRIBER@DU_NIKIRA S, ACCOUNT A
		WHERE S.ACCOUNT_ID = A.ID AND S.ID BETWEEN START_ID AND CURR_ID AND S.STATUS != 0 AND A.ACCOUNT_TYPE not in (1,2) ;

		COMMIT ;
		DBMS_OUTPUT.PUT_LINE('Subscribers Inserted for IDs Between ' || START_ID || ' and ' || CURR_ID) ;

		EXIT WHEN CURR_ID >= MAX_ID ;

		START_ID := CURR_ID + 1 ;
		CURR_ID := CURR_ID + 1000 ;

	END LOOP ;
	DBMS_OUTPUT.PUT_LINE('xxxxxxxxxxxxxx> Active Subscribers Migration Completed <xxxxxxxxxxxxxx') ;
	DBMS_OUTPUT.PUT_LINE('-');
	DBMS_OUTPUT.PUT_LINE('--------------> Migrating Blacklist and Precheck Subscriber <--------------') ;
END ;
/
-- Active Subscribers : End --

-- Blacklist and Precheck Subscriber : End --
INSERT INTO SUBSCRIBER
(
	ID, ACCOUNT_ID, PHONE_NUMBER, SUBSCRIBER_DOA, HOME_PHONE_NUMBER, OFFICE_PHONE_NUMBER, CONTACT_PHONE_NUMBER, MCN1, MCN2, IMSI, IMEI,
	CONNECTION_TYPE, GROUPS, SERVICES, STATUS, QOS, PRODUCT_TYPE, MODIFIED_DATE, NETWORK_ID, RATEPLAN, RATEPLAN_ID, DATE_OF_BIRTH, BILLCYCLE,
	SUBSCRIPTION_TYPE, CREDIT_CLASS, END_SERVICE_DATE, NATIONALITY, PASSPORT_NUMBER, COMPANY_REGISTRATION_NUMBER, GROUP_DESCRIPTION,
	OPTIONAL_FIELD1, OPTIONAL_FIELD2, OPTIONAL_FIELD3, OPTIONAL_FIELD4, OPTIONAL_FIELD5, OPTIONAL_FIELD6, OPTIONAL_FIELD7, OPTIONAL_FIELD8,
	OPTIONAL_FIELD9, OPTIONAL_FIELD10, MAIN_DIR_NO_FLAG, SUBSCRIBER_TYPE, ACCOUNT_NAME
)
SELECT
	S.ID, S.ACCOUNT_ID, S.PHONE_NUMBER, S.SUBSCRIBER_DOA, S.HOME_PHONE_NUMBER, S.OFFICE_PHONE_NUMBER, S.CONTACT_PHONE_NUMBER, S.MCN1, S.MCN2,
	S.IMSI, S.IMEI, S.CONNECTION_TYPE, S.GROUPS, S.SERVICES, S.STATUS, S.QOS, S.PRODUCT_TYPE, S.MODIFIED_DATE, S.NETWORK_ID, S.RATEPLAN, S.RATEPLAN_ID,
	S.DATE_OF_BIRTH, S.BILLCYCLE, S.SUBSCRIPTION_TYPE, S.CREDIT_CLASS, S.END_SERVICE_DATE, S.NATIONALITY, S.PASSPORT_NUMBER, S.COMPANY_REGISTRATION_NUMBER,
	S.GROUP_DESCRIPTION, S.OPTIONAL_FIELD1, S.OPTIONAL_FIELD2, S.OPTIONAL_FIELD3, S.OPTIONAL_FIELD4, S.OPTIONAL_FIELD5, S.OPTIONAL_FIELD6,
	S.OPTIONAL_FIELD7, S.OPTIONAL_FIELD8, S.OPTIONAL_FIELD9, S.OPTIONAL_FIELD10, S.MAIN_DIR_NO_FLAG, 1, A.ACCOUNT_NAME
FROM BLACKLIST_SUBSCRIBER@DU_NIKIRA S, ACCOUNT A
WHERE S.ACCOUNT_ID = A.ID AND A.ACCOUNT_TYPE IN (0,1) ;

COMMIT;

INSERT INTO SUBSCRIBER
(
	ID, ACCOUNT_ID, PHONE_NUMBER, SUBSCRIBER_DOA, HOME_PHONE_NUMBER, OFFICE_PHONE_NUMBER, CONTACT_PHONE_NUMBER, MCN1, MCN2, IMSI, IMEI,
	CONNECTION_TYPE, GROUPS, SERVICES, STATUS, QOS, PRODUCT_TYPE, MODIFIED_DATE, NETWORK_ID, RATEPLAN, RATEPLAN_ID, DATE_OF_BIRTH, BILLCYCLE,
	SUBSCRIPTION_TYPE, CREDIT_CLASS, END_SERVICE_DATE, NATIONALITY, PASSPORT_NUMBER, COMPANY_REGISTRATION_NUMBER, GROUP_DESCRIPTION,
	OPTIONAL_FIELD1, OPTIONAL_FIELD2, OPTIONAL_FIELD3, OPTIONAL_FIELD4, OPTIONAL_FIELD5, OPTIONAL_FIELD6, OPTIONAL_FIELD7, OPTIONAL_FIELD8,
	OPTIONAL_FIELD9, OPTIONAL_FIELD10, MAIN_DIR_NO_FLAG, SUBSCRIBER_TYPE, ACCOUNT_NAME
)
SELECT
	S.ID, S.ACCOUNT_ID, S.PHONE_NUMBER, S.SUBSCRIBER_DOA, S.HOME_PHONE_NUMBER, S.OFFICE_PHONE_NUMBER, S.CONTACT_PHONE_NUMBER, S.MCN1, S.MCN2,
	S.IMSI, S.IMEI, S.CONNECTION_TYPE, S.GROUPS, S.SERVICES, S.STATUS, S.QOS, S.PRODUCT_TYPE, S.MODIFIED_DATE, S.NETWORK_ID, S.RATEPLAN, S.RATEPLAN_ID,
	S.DATE_OF_BIRTH, S.BILLCYCLE, S.SUBSCRIPTION_TYPE, S.CREDIT_CLASS, S.END_SERVICE_DATE, S.NATIONALITY, S.PASSPORT_NUMBER, S.COMPANY_REGISTRATION_NUMBER,
	S.GROUP_DESCRIPTION, S.OPTIONAL_FIELD1, S.OPTIONAL_FIELD2, S.OPTIONAL_FIELD3, S.OPTIONAL_FIELD4, S.OPTIONAL_FIELD5, S.OPTIONAL_FIELD6,
	S.OPTIONAL_FIELD7, S.OPTIONAL_FIELD8, S.OPTIONAL_FIELD9, S.OPTIONAL_FIELD10, S.MAIN_DIR_NO_FLAG, 2, A.ACCOUNT_NAME
FROM BLACKLIST_SUBSCRIBER@DU_NIKIRA S, ACCOUNT A
WHERE S.ACCOUNT_ID = A.ID AND A.ACCOUNT_TYPE IN (0,1) ;

COMMIT ;
-- Blacklist and Precheck Subscriber : End --

DECLARE
	SEQ_VALUE NUMBER ;
BEGIN
	SELECT SUBSCRIBER_ID.NEXTVAL@DU_NIKIRA INTO SEQ_VALUE FROM DUAL ;
	EXECUTE IMMEDIATE 'DROP SEQUENCE SUBSCRIBER_ID' ;
	EXECUTE IMMEDIATE 'CREATE SEQUENCE SUBSCRIBER_ID INCREMENT BY 1 START WITH ' || SEQ_VALUE || ' NOMAXVALUE NOMINVALUE NOCYCLE CACHE 20 ORDER' ;

	SELECT ACCOUNT_ID.NEXTVAL@DU_NIKIRA INTO SEQ_VALUE FROM DUAL ;
	EXECUTE IMMEDIATE 'DROP SEQUENCE ACCOUNT_ID' ;
	EXECUTE IMMEDIATE 'CREATE SEQUENCE ACCOUNT_ID INCREMENT BY 1 START WITH ' || SEQ_VALUE || ' NOMAXVALUE NOMINVALUE NOCYCLE CACHE 20 ORDER' ;

	DBMS_OUTPUT.PUT_LINE('********************* Migration Completed *********************') ;
END ;
/


DELETE FROM BLACKLIST_NEURAL_PROFILE ;
DELETE FROM SUBSCRIBER_NEURAL_PROFILE ;

INSERT INTO SUBSCRIBER_NEURAL_PROFILE SELECT * FROM SUBSCRIBER_NEURAL_PROFILE@DU_NIKIRA ;
INSERT INTO BLACKLIST_NEURAL_PROFILE SELECT * FROM BLACKLIST_NEURAL_PROFILE@DU_NIKIRA ;

COMMIT ;
--EXIT;

